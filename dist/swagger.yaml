openapi: 3.0.2
servers:
  - url: https://bungou-backend-production.up.railway.app/api/v1
info:
  description: |-
    This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about
    Swagger at [http://swagger.io](http://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!
    You can now help us improve the API whether it's by making changes to the definition itself or to the code.
    That way, with time, we can improve the API in general, and expose some of the new features in OAS3.

    Some useful links:
    - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)
    - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
  version: 1.0.17
  title: Swagger Book Store - OpenAPI 3.0
  termsOfService: 'http://swagger.io/terms/'
  # contact:
  #   email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: book
    description: Everything about book in the store
  - name: review
    description: Book reviewed by user
  - name: user
    description: Operations about user
paths:
  /book:
    get:
      tags:
        - book
      summary: Get book
      description: Get all book with filter function
      operationId: getBook
      parameters:
        - name: search
          in: query
          description: Title of book
          required: false
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/BookApiResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/BookApiResponse'
        '405':
          description: Invalid input
  '/book/{id}':
    get:
      tags:
      - book
      summary: Get detail of single book
      description: Get all content about single book by Id
      operationId: getBookById
      parameters:
        - name: id
          in: path
          description: Book ID
          required: true
          schema: 
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Book'
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '400':
          description: Invalid BookId supplied
        '404':
          description: Book not found
  '/book/review/{id}':
    get:
      tags:
      - book
      summary: Get review of book
      description: Get all review of book by book Id
      operationId: getBookReview
      parameters:
        - name: id
          in: path
          description: Book ID
          required: true
          schema: 
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Review'
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
        '400':
          description: Invalid BookId supplied
        '404':
          description: Book not found
  /book/upload:
    post:
      tags:
      - book
      summary: Upload file 
      description: Upload Image or file 
      consumes: 
        - multipart/form-data;;tt
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                fileName:
                  type: string
                  format: binary
      responses:
        '200':
          description: successful operation
          # content:
          #   application/xml:
          #     schema:
          #       $ref: '#/components/schemas/Book'
          #   application/json:
          #     schema:
          #       $ref: '#/components/schemas/Book'
        '404':
          description: File not found
        '500':
          description: Upload Failed
  /user/register:
    post:
      tags:
      - user
      
externalDocs:
  description: Find out more about Swagger
  url: 'http://swagger.io'
components:
  schemas:
    Order:
      x-swagger-router-model: io.swagger.petstore.model.Order
      properties:
        id:
          type: integer
          format: int64
          example: 10
        petId:
          type: integer
          format: int64
          example: 198772
        quantity:
          type: integer
          format: int32
          example: 7
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          enum:
            - placed
            - approved
            - delivered
          example: approved
        complete:
          type: boolean
      xml:
        name: order
      type: object
    Customer:
      properties:
        id:
          type: integer
          format: int64
          example: 100000
        username:
          type: string
          example: fehguy
        address:
          type: array
          items:
            $ref: '#/components/schemas/Address'
          xml:
            wrapped: true
            name: addresses
      xml:
        name: customer
      type: object
    Address:
      properties:
        street:
          type: string
          example: 437 Lytton
        city:
          type: string
          example: Palo Alto
        state:
          type: string
          example: CA
        zip:
          type: string
          example: 94301
      xml:
        name: address
      type: object
    Review:
      properties:
        id:
          type: integer
          format: int64
          example: 1
        bookId:
          type: int64
          example: 1
        userId:
          type: int64
          example: 1
        review:
          type: string
          example: nice
        date:
          type: string
          format: date
        rating:
          type: number
          multipleOf: 0.1
        createAt:
          type: string
          format: date
      xml:
        name: category
      type: object
    User:
      properties:
        id:
          type: integer
          format: int64
          example: 10
        firstname:
          type: string
          example: theUser
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: 12345
      xml:
        name: user
      type: object
    Tag:
      x-swagger-router-model: io.swagger.petstore.model.Tag
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: tag
      type: object
    Book:
      properties:
        id:
          type: integer
          format: int64
          example: 10
        title:
          type: string
          example: Normal People
        image:
          type: string
        year:
          type: integer
          example: 2000
        price:
          type: number
          multipleOf: 0.01
        author:
          type: string
          example: Chris Bale
        rating:
          type: number
          multipleOf: 0.1
        publisher:
          type: string
          example: IBM
        length:
          type: integer
          example: 300
        isbn:
          type: string
          example: 12341512523523
        citycountry:
          type: string
          example: London
        catygories:
          type: string
          example: Action
      xml:
        name: book
      type: object
    BookApiResponse:
      properties:
        page:
          type: integer
          format: int32
        limit:
          type: integer
        count:
          type: integer
        data:
          application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Book'
      xml:
        name: '##default'
      type: object
  requestBodies:
    Pet:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Pet'
        application/xml:
          schema:
            $ref: '#/components/schemas/Pet'
      description: Pet object that needs to be added to the store
    UserArray:
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
      description: List of user object
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: 'https://petstore.swagger.io/oauth/authorize'
          scopes:
            'write:pets': modify pets in your account
            'read:pets': read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header